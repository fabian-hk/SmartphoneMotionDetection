import Net
import numpy as np
import tensorflow as tf


data_raw = [[1.55,0.014696788,-0.022360925,-0.0127840275],[0.02,-0.035250053,0.69249785,-0.09506022],[1.55,0.003511512,-0.006914589,-0.0069250716],[0.76,-0.055750042,0.70478445,-0.14581095],[0.81,0.023218904,-0.04260095,-0.0127840275],[0.01,-0.15016414,0.7180653,-0.15236717],[1.56,-7.4954575E-4,-0.003186163,-0.0074577043],[0.02,-0.17051494,0.7027544,-0.11466588],[1.58,-0.017261146,0.0069338493,-0.011718762],[0.02,-0.041772973,0.65975857,-0.047743507],[1.53,-0.0028800748,-0.011708278,-0.017045084],[0.02,-0.19028936,0.69744533,-0.12236758],[1.56,0.018425215,-0.025556717,-0.014914555],[0.02,-0.10165137,0.70645714,-0.13517965],[1.52,3.1571867E-4,-0.027687244,-0.0031966465],[0.02,-0.09050372,0.64578336,-0.07786746],[1.58,0.013098892,-0.046329375,-0.013316658],[0.02,-0.19553092,0.6704553,-0.10321278],[1.55,0.0024462475,-0.015436705,-0.014914555],[0.02,-0.12535812,0.67913,-0.09838625],[1.55,-0.0018123083,0.013864057,-0.006923554],[0.05,-0.04827466,0.66187257,-0.1874809],[1.54,0.0045792786,0.0042766766,0.0031964579],[0.01,-0.076911986,0.6773852,-0.09403976],[1.5,0.0024487495,-0.0021149102,-5.3196773E-4],[0,-0.14586504,0.69906074,-0.12619457],[1.61,-0.003410205,-0.0026475424,-0.009054083],[0.02,-0.056618415,0.64849776,-0.13166177],[1.56,-0.0028775728,0.003211412,-0.004793025],[0.73,-0.14206623,0.6294844,-0.11765006],[0.82,0.0019161173,0.017592482,0.0042617223],[0.78,0.009576358,0.6276871,-0.16392554],[0.8,-0.0055407337,-0.01649598,-0.00798882],[0.03,-0.101838686,0.61599356,-0.17994198],[1.56,0.017364716,-0.014892666,5.3466996E-4],[0.02,-0.13213834,0.670957,-0.21767567],[1.56,-0.0023426767,0.022391591,0.0042630956],[0.04,-0.055503923,0.63291615,-0.07161994],[1.52,-0.0044732057,-0.0026421244,0.008524153],[1.58,-0.08009166,0.6111912,-0.1451428],[1.58,0.0051141744,0.007477888,2.0377338E-6],[1.57,-0.062634185,0.61388946,-0.10801892],[1.6,0.0024537535,0.0016254922,0.0042647575],[3.13,-0.17958952,0.6032867,-0.056675654],[3.17,-0.0023399366,2.7595554E-5,-0.0010615648],[0.02,0.004348147,0.60567427,-0.08053166],[1.54,8.558568E-4,-0.006896624,-0.0074531515],[10.24,-0.046994843,0.61329323,-0.17243929],[0.77,0.0077790036,0.0021555577,0.0016009458],[0.01,-0.046401795,0.6217299,-0.2724615],[1.54,0.0013918249,-0.006356007,-0.003722703],[61.39,0.066035986,-0.61060953,-0.27247635],[1.57,-0.010864197,0.008544578,0.010655044],[24.38,0.13005604,-0.5959777,-0.28968793],[0.77,-0.02418858,0.058591474,0.009051943],[15.77,0.17770566,-0.54814947,-0.33387816],[17.24,-0.0289837,0.054326996,-0.0053299936],[89.72,0.115162954,-0.6654371,-0.37730742],[1.58,0.07061733,-0.0037327674,0.07509675],[0.03,0.4560913,-0.77386844,-0.39077416],[1.53,-0.0012880159,-0.035690702,-0.014385465],[0.83,0.019558618,-0.6804092,-0.09906257],[0.77,-0.01673292,-0.033024117,-0.02450461],[1.56,0.31761098,-0.7212946,-0.22718053]]
data = np.asarray(data_raw, np.float32)

# Declare input variables
x = tf.placeholder(tf.float32, [Net.data_set_size, 4])
x_img = tf.reshape(x, [-1, 16, 16, 1])
y_ = tf.placeholder(tf.int32, [None])
keep_prob = tf.placeholder(tf.float32)

y = Net.create_net(x_img, keep_prob, Net.nr_classes, "testnet")

saver = tf.train.Saver()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    checkpoint = tf.train.get_checkpoint_state(Net.model_path)
    if checkpoint and checkpoint.model_checkpoint_path:
        saver.restore(sess, checkpoint.model_checkpoint_path)
        print("Successfully loaded:", checkpoint.model_checkpoint_path)
        result = sess.run(y, feed_dict={x: data, keep_prob: 1.0})
        print("Result: "+str(np.argmax(result)))
    else:
        print("Could not find model")
