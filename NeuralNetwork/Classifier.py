import Net
import numpy as np
import tensorflow as tf


data_raw = [[0.23,0.47844312,0.2758712,-2.3067207],[0.76,-0.48874244,-0.40954113,-0.972187],[0.57,0.10784199,0.29428783,-0.14282508],[0.23,-1.0025882,-0.679143,-1.3587024],[0.78,-0.1808136,-0.3725339,-1.2642412],[0.55,0.07694932,0.52385235,0.1277521],[0.24,1.2098782,0.20355682,0.6840364],[0.79,0.6794608,-0.23595044,-1.3246027],[0.54,0.17601891,0.16858663,-0.0016775392],[0.25,-0.48263797,0.15783162,0.35731828],[0.78,0.31878904,-0.23042208,-0.81483424],[0.55,-0.0024128829,0.05407069,0.029747762],[1.02,-1.2002299,0.059298504,0.0387196],[0.53,0.052981175,0.026376178,0.1245563],[0.26,0.7099794,0.04230399,0.017602041],[0.79,-0.16911449,-0.06751989,0.021130938],[2.55,-0.32940978,0.022033159,-0.68507206],[0.8,0.5140252,-0.03272502,-0.63782364],[0.36,-0.041294727,-0.32995477,-0.028841782],[0.42,-0.77713656,0.19636746,-0.32532373],[0.78,0.62959564,0.05425294,-0.2231153],[0.38,0.0071737613,-0.2932112,-0.04854918],[0.41,-1.2218803,-0.07960078,-0.5904238],[0.79,-0.2704699,-0.013830468,-0.4100234],[1.56,0.36794922,0.07620216,-0.49511087],[2.38,-0.40037277,0.004297664,-0.53115964],[3.12,0.36395133,0.0645063,-0.25407124],[2.59,-0.6060135,0.07910661,-1.0266973],[0.16,-0.039697815,-0.003991425,-0.025645994],[0.61,0.90274787,-0.8168776,-0.979535],[0.79,0.094980456,0.20663665,0.03019573],[0.79,0.5871182,-0.4919103,-1.2995349],[0.79,0.68099487,-0.33287364,0.20402336],[0.17,0.25325036,1.3212008,-0.70794785],[0.62,-1.1419249,-0.0075501692,-0.7598539],[0.76,1.0610929,-0.267159,-1.4208913],[0.17,0.01676163,0.11319097,0.38501346],[0.63,0.8983331,-0.5938806,0.21549042],[0.94,0.04658904,-1.7313144,1.7437582],[0.64,0.8336069,-3.1667342,-1.435465],[0.82,3.2013135,-3.6729763,5.115445],[0.15,3.1987069,-1.2333009,-0.7340468],[0.61,-5.449925,-6.940343,12.416794],[0.78,-1.0291497,-3.2350426,0.09589157],[0.17,1.5747112,-3.8543842,-2.238733],[0.8,-14.712906,2.7724419,2.3215513],[0.81,3.337724,-0.6250349,4.533153],[0.02,3.4702768,0.5323891,3.4356017],[0.75,7.049354,-3.6748867,2.6600018],[0.77,3.9933941,-0.8577952,0.85586035],[0.06,0.7248187,-0.99649155,-6.335361],[0.75,1.4895949,-2.9677117,-4.307383],[0.8,0.46364003,-3.502317,0.7338876],[0.02,0.944577,-3.8561037,1.7201998],[0.76,-3.7279673,-3.0053525,1.6342852],[0.79,0.8103836,-0.3347532,0.7685087],[0.01,6.825601,-0.9971529,2.4250245],[0.75,-0.25413617,-2.6251159,-0.5052156],[0.81,2.1062777,1.7989715,2.8377848],[0.02,-2.4171731,1.15823,-3.8042507],[0.75,-1.6192253,0.11335877,-1.1897243],[0.78,-1.9598383,0.7842939,-0.0751808],[0.01,-1.9994336,-0.56175154,0.26742616],[0.76,-1.8095605,0.19670442,3.4791079]]
data = np.asarray(data_raw, np.float32)

# Declare input variables
x = tf.placeholder(tf.float32, [Net.data_set_size, 4])
x_img = tf.reshape(x, [-1, 16, 16, 1])
y_ = tf.placeholder(tf.int32, [None])
keep_prob = tf.placeholder(tf.float32)

y = Net.create_net(x_img, keep_prob, Net.nr_classes, "testnet")

softmax = tf.nn.softmax(y, name="softmax")

saver = tf.train.Saver()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    checkpoint = tf.train.get_checkpoint_state(Net.model_path)
    if checkpoint and checkpoint.model_checkpoint_path:
        saver.restore(sess, checkpoint.model_checkpoint_path)
        print("Successfully loaded:", checkpoint.model_checkpoint_path)
        result = sess.run(softmax, feed_dict={x: data, keep_prob: 1.0})
        print("Result: "+str(result))
    else:
        print("Could not find model")
